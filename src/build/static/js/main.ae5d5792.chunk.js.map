{"version":3,"sources":["components/Receipt/Receipt.js","components/NewReceipt/NewReceipt.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Receipt","props","state","receipt_id","receipt","_id","name","description","image_url","price","purchase_date","Date","editMode","switchMode","bind","saveReceipt","handleChange","handleDateChange","deleteReceipt","this","setState","window","confirm","fetch","process","method","then","res","console","log","fetchReceipts","catch","err","headers","body","JSON","stringify","event","target","value","date","className","id","hidden","role","aria-label","onClick","icon","faCheck","faEdit","href","rel","faImage","faTrash","toLocaleDateString","type","onChange","dateFormat","selected","React","Component","NewReceipt","newReceiptToggle","App","loaded","newReceipt","receipts","json","result","sort","a","b","map","item","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kSAoHeA,G,wDA3GX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,WAAYF,EAAMG,QAAQC,IAC1BC,KAAML,EAAMG,QAAQE,KACpBC,YAAaN,EAAMG,QAAQG,YAC3BC,UAAWP,EAAMG,QAAQI,UACzBC,MAAOR,EAAMG,QAAQK,MACrBC,cAAe,IAAIC,KAAKV,EAAMG,QAAQM,eACtCE,UAAU,GAGd,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,gBAhBN,E,yDAoBfK,KAAKC,SAAS,CAACR,UAAWO,KAAKjB,MAAMU,a,sCAGxB,IAAD,OACTS,OAAOC,QAAP,sDAA8DH,KAAKjB,MAAMI,KAAzE,OACCiB,MAAM,GAAD,OAAIC,GAAJ,qBAA0CL,KAAKjB,MAAMC,YAAc,CACpEsB,OAAQ,WACTC,MAAK,SAAAC,GACJC,QAAQC,IAAI,yBACZ,EAAK5B,MAAM6B,mBACZC,OAAM,SAAAC,GACLJ,QAAQC,IAAI,oC,oCAKT,IAAD,OACVV,KAAKN,aACLU,MAAM,GAAD,OAAIC,GAAJ,qBAA0CL,KAAKjB,MAAMC,YAAc,CACpEsB,OAAQ,MACRQ,QAAS,CACL,eAAiB,oBAErBC,KAAMC,KAAKC,UAAU,CACjB9B,KAAOa,KAAKjB,MAAMI,KAClBC,YAAcY,KAAKjB,MAAMK,YACzBC,UAAYW,KAAKjB,MAAMM,UACvBC,MAAOU,KAAKjB,MAAMO,MAClBC,cAAeS,KAAKjB,MAAMQ,kBAE/BgB,MAAK,SAAAC,GACJC,QAAQC,IAAI,yBACZ,EAAK5B,MAAM6B,mBACZC,OAAM,SAAAC,GACLJ,QAAQC,IAAI,oC,mCAIPQ,GACTlB,KAAKC,SAAL,eACKiB,EAAMC,OAAOhC,KAAQ+B,EAAMC,OAAOC,U,uCAI1BC,GACbrB,KAAKC,SAAS,CACVV,cAAgB8B,M,+BAKpB,OACI,yBAAKC,UAAU,oBACX,4BAAKtB,KAAKjB,MAAMI,MAChB,yBAAKmC,UAAU,WACX,0BAAMC,GAAG,OAAOC,QAASxB,KAAKjB,MAAMU,SAAUgC,KAAK,MAAMC,aAAW,OAAOC,QAAS3B,KAAKJ,aAAa,kBAAC,IAAD,CAAiB0B,UAAU,OAAOM,KAAMC,OAC9I,0BAAML,OAAQxB,KAAKjB,MAAMU,SAAUgC,KAAK,MAAMC,aAAW,OAAOC,QAAS3B,KAAKN,YAAY,kBAAC,IAAD,CAAiB4B,UAAU,OAAOM,KAAME,OAClI,8BAAO,uBAAIC,KAAM/B,KAAKjB,MAAMM,UAAW8B,OAAO,SAASa,IAAI,uBAAsB,kBAAC,IAAD,CAAiBV,UAAU,OAAOM,KAAMK,QACzH,0BAAMV,GAAG,SAASE,KAAK,MAAMC,aAAW,SAASC,QAAS3B,KAAKD,eAAe,kBAAC,IAAD,CAAiBuB,UAAU,OAAOM,KAAMM,QAE1H,yBAAKV,OAAQxB,KAAKjB,MAAMU,SAAU6B,UAAU,kBACxC,4BACI,4BAAI,oCAAJ,IAAkBtB,KAAKjB,MAAMI,MAC7B,4BAAI,2CAAJ,IAAyBa,KAAKjB,MAAMK,aACpC,4BAAI,qCAAJ,QAAoBY,KAAKjB,MAAMO,OAC/B,4BAAI,6CAAJ,IAA2BU,KAAKjB,MAAMQ,cAAc4C,mBAAmB,YAG/E,yBAAKX,QAASxB,KAAKjB,MAAMU,SAAU6B,UAAU,kBACzC,8BACI,+BAAO,oCAAP,KACA,2BAAOc,KAAK,OAAOjD,KAAK,OAAOiC,MAAOpB,KAAKjB,MAAMI,KAAMkD,SAAUrC,KAAKH,eAF1E,IAE2F,6BACvF,+BAAO,2CAAP,KACA,2BAAOuC,KAAK,OAAOjD,KAAK,cAAciC,MAAOpB,KAAKjB,MAAMK,YAAaiD,SAAUrC,KAAKH,eAAgB,6BACpG,+BAAO,qCAAP,KACA,2BAAOuC,KAAK,OAAOjD,KAAK,QAAQiC,MAAOpB,KAAKjB,MAAMO,MAAO+C,SAAUrC,KAAKH,eAN5E,IAM6F,6BACzF,+BAAO,yCAAP,KACA,2BAAOuC,KAAK,OAAOjD,KAAK,YAAYiC,MAAOpB,KAAKjB,MAAMM,UAAWgD,SAAUrC,KAAKH,eARpF,IAQqG,6BACjG,+BAAO,6CAAP,KACA,kBAAC,IAAD,CAAYyC,WAAW,aAAaC,SAAUvC,KAAKjB,MAAMQ,cAAe8C,SAAUrC,KAAKF,0B,GArGzF0C,IAAMC,YC6EbC,G,yDA5EX,WAAY5D,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTI,KAAM,mBACNC,YAAa,GACbE,MAAO,EACPD,UAAW,GACXE,cAAe,IAAIC,MAGvB,EAAKK,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAZL,E,0DAeH,IAAD,OACVS,MAAM,GAAD,OAAIC,GAAJ,iBAA6C,CAC9CC,OAAQ,OACRQ,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjB9B,KAAOa,KAAKjB,MAAMI,KAClBC,YAAcY,KAAKjB,MAAMK,YACzBC,UAAYW,KAAKjB,MAAMM,UACvBC,MAAOU,KAAKjB,MAAMO,MAClBC,cAAeS,KAAKjB,MAAMQ,kBAE/BgB,MAAK,SAAAC,GACJC,QAAQC,IAAI,uBACZ,EAAK5B,MAAM6B,gBACX,EAAK7B,MAAM6D,sBACZ/B,OAAM,SAAAC,GACLJ,QAAQC,IAAIG,GACZJ,QAAQC,IAAI,+B,mCAIPQ,GACTlB,KAAKC,SAAL,eACKiB,EAAMC,OAAOhC,KAAQ+B,EAAMC,OAAOC,U,uCAI1BC,GACbrB,KAAKC,SAAS,CACVV,cAAgB8B,M,+BAKpB,OACI,yBAAKC,UAAU,oBACX,4BAAKtB,KAAKjB,MAAMI,MAChB,yBAAKmC,UAAU,WACX,0BAAMC,GAAG,OAAOE,KAAK,MAAMC,aAAW,OAAOC,QAAS3B,KAAKJ,aAAa,kBAAC,IAAD,CAAiB0B,UAAU,OAAOM,KAAMC,QAEpH,yBAAKP,UAAU,kBACX,8BACI,+BAAO,oCAAP,KACA,2BAAOc,KAAK,OAAOjD,KAAK,OAAOiC,MAAOpB,KAAKjB,MAAMI,KAAMkD,SAAUrC,KAAKH,eAF1E,IAE2F,6BACvF,+BAAO,2CAAP,KACA,2BAAOuC,KAAK,OAAOjD,KAAK,cAAciC,MAAOpB,KAAKjB,MAAMK,YAAaiD,SAAUrC,KAAKH,eAAgB,6BACpG,+BAAO,qCAAP,KACA,2BAAOuC,KAAK,OAAOjD,KAAK,QAAQiC,MAAOpB,KAAKjB,MAAMO,MAAO+C,SAAUrC,KAAKH,eAN5E,IAM6F,6BACzF,+BAAO,yCAAP,KACA,2BAAOuC,KAAK,OAAOjD,KAAK,YAAYiC,MAAOpB,KAAKjB,MAAMM,UAAWgD,SAAUrC,KAAKH,eARpF,IAQqG,6BACjG,+BAAO,6CAAP,KACA,kBAAC,IAAD,CAAYyC,WAAW,aAAaC,SAAUvC,KAAKjB,MAAMQ,cAAe8C,SAAUrC,KAAKF,0B,GArEtF0C,IAAMC,YCwDhBG,E,kDAxDb,WAAY9D,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACX8D,QAAQ,EACRC,YAAY,EACZC,SAAU,IAGZ,EAAKpC,cAAgB,EAAKA,cAAchB,KAAnB,gBACrB,EAAKgD,iBAAmB,EAAKA,iBAAiBhD,KAAtB,gBATP,E,4DAYF,IAAD,OACdS,MAAM,GAAD,OAAIC,GAAJ,cACFE,MAAK,SAAAC,GAAG,OAAIA,EAAIwC,UAChBzC,MACC,SAAC0C,GACC,EAAKhD,SAAS,CACZ8C,SAAWE,EAAOC,MAAK,SAACC,EAAEC,GACxB,OAAO,IAAI5D,KAAK4D,EAAE7D,eAAiB,IAAIC,KAAK2D,EAAE5D,yB,yCAQxDS,KAAKC,SAAS,CACZ6C,YAAc9C,KAAKjB,MAAM+D,e,0CAK3B9C,KAAKW,kB,+BAGG,IAAD,OAEDoC,EAAW/C,KAAKjB,MAAMgE,SAASM,KAAI,SAAAC,GAAI,OAC3C,kBAAC,EAAD,CAASC,IAAKD,EAAKpE,IAAKD,QAASqE,EAAM3C,cAAe,EAAKA,mBAG7D,OACE,yBAAKW,UAAU,OACb,8CAAmB,0BAAMG,KAAK,MAAMC,aAAW,WAA5B,gBAAnB,KACA,6BACE,4BAAQU,KAAK,SAASd,UAAU,YAAYK,QAAS3B,KAAK2C,kBAA1D,eACA,4BAAQP,KAAK,SAASd,UAAU,aAAhC,UAEDtB,KAAKjB,MAAM+D,WAAa,kBAAC,EAAD,CAAYH,iBAAkB3C,KAAK2C,iBAAkBhC,cAAeX,KAAKW,gBAA+B,KAChIoC,O,GApDSP,IAAMC,WCOJe,QACW,cAA7BtD,OAAOuD,SAASC,UAEe,UAA7BxD,OAAOuD,SAASC,UAEhBxD,OAAOuD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEdzD,OAAM,SAAA0D,GACL7D,QAAQ6D,MAAMA,EAAMC,a","file":"static/js/main.ae5d5792.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../styles/receipt.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faEdit, faImage, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass Receipt extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            receipt_id: props.receipt._id,\r\n            name: props.receipt.name,\r\n            description: props.receipt.description,\r\n            image_url: props.receipt.image_url,\r\n            price: props.receipt.price,\r\n            purchase_date: new Date(props.receipt.purchase_date),\r\n            editMode: false\r\n        };\r\n\r\n        this.switchMode = this.switchMode.bind(this);\r\n        this.saveReceipt = this.saveReceipt.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n        this.deleteReceipt = this.deleteReceipt.bind(this);\r\n    }\r\n\r\n    switchMode() {\r\n        this.setState({editMode: !this.state.editMode});\r\n    }\r\n\r\n    deleteReceipt() {\r\n        if(window.confirm(`Are you sure you want to permanently delete ${this.state.name}?`)) {\r\n            fetch(`${process.env.REACT_APP_API}/receipts/${this.state.receipt_id}`, {\r\n                method: 'DELETE',\r\n            }).then(res => {\r\n                console.log(\"Successfully deleted!\");\r\n                this.props.fetchReceipts();\r\n            }).catch(err => {\r\n                console.log(\"Error with deleting receipt\");\r\n            });\r\n        };\r\n    }\r\n\r\n    saveReceipt() {\r\n        this.switchMode();\r\n        fetch(`${process.env.REACT_APP_API}/receipts/${this.state.receipt_id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-type' : 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name : this.state.name,\r\n                description : this.state.description,\r\n                image_url : this.state.image_url,\r\n                price: this.state.price,\r\n                purchase_date: this.state.purchase_date\r\n            })\r\n        }).then(res => {\r\n            console.log(\"Successfully updated!\");\r\n            this.props.fetchReceipts();\r\n        }).catch(err => { \r\n            console.log(\"Error with updating receipt\");\r\n        });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        });\r\n    }\r\n\r\n    handleDateChange(date) {\r\n        this.setState({\r\n            purchase_date : date\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"receiptContainer\">\r\n                <h1>{this.state.name}</h1>\r\n                <div className=\"actions\">\r\n                    <span id=\"save\" hidden={!this.state.editMode} role=\"img\" aria-label=\"save\" onClick={this.saveReceipt}><FontAwesomeIcon className=\"icon\" icon={faCheck}/></span>\r\n                    <span hidden={this.state.editMode} role=\"img\" aria-label=\"edit\" onClick={this.switchMode}><FontAwesomeIcon className=\"icon\" icon={faEdit}/></span>\r\n                    <span ><a  href={this.state.image_url} target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon className=\"icon\" icon={faImage}/></a></span>\r\n                    <span id=\"delete\" role=\"img\" aria-label=\"delete\" onClick={this.deleteReceipt}><FontAwesomeIcon className=\"icon\" icon={faTrash}/></span>\r\n                </div>\r\n                <div hidden={this.state.editMode} className=\"receiptDetails\"> \r\n                    <ul>\r\n                        <li><b>Name:</b> {this.state.name}</li>\r\n                        <li><b>Description:</b> {this.state.description}</li>\r\n                        <li><b>Price:</b> £{this.state.price}</li>\r\n                        <li><b>Purchase Date:</b> {this.state.purchase_date.toLocaleDateString(\"en-GB\")}</li>\r\n                    </ul>\r\n                </div>\r\n                <div hidden={!this.state.editMode} className=\"receiptDetails\">\r\n                    <form>\r\n                        <label><b>Name:</b> </label>\r\n                        <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} /> <br/>\r\n                        <label><b>Description:</b> </label>\r\n                        <input type=\"text\" name=\"description\" value={this.state.description} onChange={this.handleChange} /><br/>\r\n                        <label><b>Price:</b> </label>\r\n                        <input type=\"text\" name=\"price\" value={this.state.price} onChange={this.handleChange} /> <br/>\r\n                        <label><b>Image Url:</b> </label>\r\n                        <input type=\"text\" name=\"image_url\" value={this.state.image_url} onChange={this.handleChange} /> <br/>\r\n                        <label><b>Purchase Date:</b> </label>\r\n                        <DatePicker dateFormat=\"dd/MM/yyyy\" selected={this.state.purchase_date} onChange={this.handleDateChange}/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Receipt;","import React from 'react';\r\nimport \"../../styles/receipt.scss\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass NewReceipt extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: \"Untitled Receipt\",\r\n            description: \"\",\r\n            price: 0,\r\n            image_url: \"\",\r\n            purchase_date: new Date()\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n        this.saveReceipt = this.saveReceipt.bind(this);\r\n    }\r\n\r\n    saveReceipt() {\r\n        fetch(`${process.env.REACT_APP_API}/receipts/add`,{\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name : this.state.name,\r\n                description : this.state.description,\r\n                image_url : this.state.image_url,\r\n                price: this.state.price,\r\n                purchase_date: this.state.purchase_date\r\n            })\r\n        }).then(res => {\r\n            console.log(\"Successfully saved!\");\r\n            this.props.fetchReceipts();\r\n            this.props.newReceiptToggle();\r\n        }).catch(err => {\r\n            console.log(err);\r\n            console.log(\"Failed to save receipt\");\r\n        })\r\n    }\r\n    \r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        });\r\n    }\r\n\r\n    handleDateChange(date) {\r\n        this.setState({\r\n            purchase_date : date\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"receiptContainer\">\r\n                <h1>{this.state.name}</h1>\r\n                <div className=\"actions\">\r\n                    <span id=\"save\" role=\"img\" aria-label=\"save\" onClick={this.saveReceipt}><FontAwesomeIcon className=\"icon\" icon={faCheck}/></span>\r\n                </div>\r\n                <div className=\"receiptDetails\">\r\n                    <form>\r\n                        <label><b>Name:</b> </label>\r\n                        <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} /> <br/>\r\n                        <label><b>Description:</b> </label>\r\n                        <input type=\"text\" name=\"description\" value={this.state.description} onChange={this.handleChange} /><br/>\r\n                        <label><b>Price:</b> </label>\r\n                        <input type=\"text\" name=\"price\" value={this.state.price} onChange={this.handleChange} /> <br/>\r\n                        <label><b>Image Url:</b> </label>\r\n                        <input type=\"text\" name=\"image_url\" value={this.state.image_url} onChange={this.handleChange} /> <br/>\r\n                        <label><b>Purchase Date:</b> </label>\r\n                        <DatePicker dateFormat=\"dd/MM/yyyy\" selected={this.state.purchase_date} onChange={this.handleDateChange}/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewReceipt;","import React from 'react';\r\nimport Receipt from '../Receipt/Receipt'\r\nimport './App.scss';\r\nimport NewReceipt from './../NewReceipt/NewReceipt';\r\n\r\nclass App extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loaded: false,\r\n      newReceipt: false,\r\n      receipts: []\r\n    }\r\n\r\n    this.fetchReceipts = this.fetchReceipts.bind(this);\r\n    this.newReceiptToggle = this.newReceiptToggle.bind(this);\r\n  }\r\n\r\n  fetchReceipts() {\r\n    fetch(`${process.env.REACT_APP_API}/receipts`)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            receipts : result.sort((a,b) => {\r\n              return new Date(b.purchase_date) - new Date(a.purchase_date)\r\n            })\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  newReceiptToggle() {\r\n    this.setState({\r\n      newReceipt : !this.state.newReceipt\r\n    });\r\n  }\r\n\r\n  componentDidMount() { \r\n    this.fetchReceipts();\r\n  }\r\n\r\n  render() {\r\n\r\n    const receipts = this.state.receipts.map(item =>\r\n      <Receipt key={item._id} receipt={item} fetchReceipts={this.fetchReceipts}></Receipt>\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Receipt Keeper <span role='img' aria-label='Receipt'>🧾</span> </h1>\r\n        <nav>\r\n          <button type=\"button\" className=\"navButton\" onClick={this.newReceiptToggle}>New Receipt</button>\r\n          <button type=\"button\" className=\"navButton\">About</button>\r\n        </nav>\r\n        {this.state.newReceipt ? <NewReceipt newReceiptToggle={this.newReceiptToggle} fetchReceipts={this.fetchReceipts}></NewReceipt> : null}\r\n        {receipts}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}